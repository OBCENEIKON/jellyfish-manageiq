# # Description: This MIQ Method configures an
# existing Simple Email Service
# It will set the region, as well as set a verified sender
# If a verified sender is chosen

# For use in MIQ under the
# /Provisioning/StateMachines/Methods/CreateSES

require 'aws-sdk'
require 'net/http'
require 'uri/http'

def send_order_status(endpoint, headers, status, information, message = '')
  uri = URI.parse(endpoint)

  information = information.merge('provision_status' => status.downcase)
  $evm.log('info', "send_order_status: Information: #{information}")
  json = {
    status: "#{status}",
    message: "#{message}",
    info: information
  }
  $evm.log('info', "send_order_status: Information #{json}")
  begin
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Put.new(uri.path)
    request.add_field('X-Staff-Email', "#{headers[0]}")
    request.add_field('X-Staff-Token', "#{headers[1]}")
    request.content_type = 'application/json'
    request.body = json.to_json
    response = http.request(request)
    $evm.log('info', "send_order_status: HTTP Response code: #{response.code}")
    $evm.log('info', "send_order_status: HTTP Response message: #{response.message}")
  rescue StandardError => e
    $evm.log('error', "send_order_status: Exception caught while sending response back to core: #{e.message}")
  end
end # End of function

$evm.log('info', 'CreateSES: Entering method')

# Retrieve properties from request
# MIQ makes product_details into a string.
# Must make into a hash
product_details = $evm.root['dialog_order_item']
order_item_hash = JSON.parse(product_details.gsub("'", '"').gsub('=>', ':'))
product_hash = order_item_hash['product_details']
order_id = order_item_hash['id']
uuid = order_item_hash['uuid']
access_key = product_hash['access_key_id']
secret_access_key = product_hash['secret_access_key']
region = product_hash['region']
email = product_hash['email']
endpoint = $evm.root['dialog_referer']
headers = [$evm.root['dialog_email'], $evm.root['dialog_token']]

# Setup the SES Region if region was chosen
if region != ''
  AWS.config(
    access_key_id: access_key,
    secret_access_key: secret_access_key,
    ses: { region: region }
  )
else
  AWS.config(
    access_key_id: access_key,
    secret_access_key: secret_access_key
  )
end

$evm.log('info', 'CreateSES: create service')
ses = AWS::SimpleEmailService.new

# Setup a verified sender if a sender was chosen
if email != ''
  begin
    info = {
      'id' => order_id,
      'uuid' => uuid
    }
    email_identities = email.split(',')
    email_identities.each do |e|
      $evm.log('info', "CreateSES: E-mail Identity: #{e}")
      ses.identities.verify(e)
    end
  rescue AWS::SimpleEmailService::Errors::InvalidClientTokenId => e
    $evm.log('error', "CreateSES: Exception caught when creating instance: #{e.message}")
    send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
    exit
  rescue AWS::RDS::Errors::InvalidParameterValue => e
    $evm.log('error', "CreateSES: Invalid parameter exception caught: #{e.message}")
    send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
    exit
  rescue AWS::RDS::Errors => e
    $evm.log('error', "CreateSES: Exception caught: #{e.message}")
    send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
    exit
  rescue StandardError => e
    $evm.log('error', "CreateSES: Exception caught #{e.message}")
    send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
    exit
  end
end

# Return the response that it was created successfully
info = {
  'id' => order_id,
  'region' => region
}

$evm.log('info', 'CreateSES: Provision executed successfully.')
send_order_status(endpoint, headers, 'OK', info)
