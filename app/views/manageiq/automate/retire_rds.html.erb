# Description: This MIQ Method deletes an RDS instance
# From an instance collection

require 'aws-sdk'
require 'net/http'
require 'securerandom'
require 'uri/http'
require 'json'

def send_order_status(endpoint, headers, status, information, message = '')
  uri = URI.parse(endpoint)

  information = information.merge('provision_status' => status.downcase)
  $evm.log('info', "send_order_status: Information: #{information}")
  json = {
    status: "#{status}",
    message: "#{message}",
    info: information
  }
  $evm.log('info', "send_order_status: Information #{json}")
  begin
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Put.new(uri.path)
    request.content_type = 'application/json'
    request.body = json.to_json
    response = http.request(request)
    $evm.log('info', "send_order_status: HTTP Response code: #{response.code}")
    $evm.log('info', "send_order_status: HTTP Response message: #{response.message}")
  rescue StandardError => e
    $evm.log('error', "send_order_status: Exception caught while sending response back to core: #{e.message}")
  end
end # End of function

# Retrieve properties from request
# MIQ makes product_details into a string.
# Must make into a hash
product_details = $evm.root['dialog_order_item']
order_item_hash = JSON.parse(product_details.gsub("'", '"').gsub('=>', ':'))
product_hash = order_item_hash['product_details']
order_id = order_item_hash['id']
uuid = order_item_hash['uuid']
db_instance_id = product_hash['instance_name']
snapshot_identifier = product_hash['snapshot_identifier']
final_snapshot = Integer(product_hash['final_snapshot'])
access_key = product_hash['access_key_id']
secret_access_key = product_hash['secret_access_key']
endpoint = $evm.root['dialog_referer']
headers = [$evm.root['dialog_email'], $evm.root['dialog_token']]

$evm.log('info', "RDSRetire: snapshot identifier #{snapshot_identifier}")
$evm.log('info', "RDSRetire: final snapshot #{final_snapshot}")
$evm.log('info', "RDSRetire: DB_Instance_ID: #{db_instance_id}")

$evm.log('info', 'RDSRetire: Enter retirement method.')
rds = AWS::RDS.new(
  access_key_id: access_key,
  secret_access_key: secret_access_key
)

# Obtain the selected instance from AWS
instance_collection = rds.db_instances
instance = instance_collection[db_instance_id]

info = {
  'id' => order_id,
  'uuid' => uuid
}

# Delete the instance
if instance.exists?
  $evm.log('info', 'RDSRetire: Instance exists. Begin retirement.')
  if final_snapshot == 0
    begin
      instance.delete(
        skip_final_snapshot: true
      )
    rescue AWS::RDS::Errors::InvalidDBInstanceState => e
      $evm.log('error', "RDSRetire: Invalid Instance state: #{e.message}")
      send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
      exit
    rescue AWS::RDS::Errors => e
      $evm.log('error', "RDSRetire: Exception caught when deleting instance: #{e.message}")
      send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
      exit
    end
  elsif final_snapshot == 1
    begin
      instance.delete(
        skip_final_snapshot: false,
        final_db_snapshot_identifier: snapshot_identifier
      )
    rescue AWS::RDS::Errors::InvalidDBInstanceState => e
      $evm.log('error', "RDSRetire: Invalid Instance state: #{e.message}")
      send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
      exit
    rescue AWS::RDS::Errors => e
      $evm.log('error', "RDSRetire: Exception caught when deleting instance: #{e.message}")
      send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
      exit
    end
  else
    $evm.log('error', 'RDSRetire: Must specify final snapshot value.')
    send_order_status(endpoint, headers, 'CRITICAL', info, 'Must specify final snapshot value')
  end
  while instance.exists? && instance.status == 'deleting'
    $evm.log('info', 'RDSRetire: Instance is deleting.')
    sleep 5
  end
  $evm.log('info', 'RDSRetire: Instance deletion complete. Begin payload response.')
  send_order_status(endpoint, headers, 'OK', info, 'Instance retired.')
else
  $evm.log('error', "RDSRetire: Instance #{db_instance_id} does not exist.")
  send_order_status(endpoint, headers, 'CRITICAL', info, 'Instance does not exist')
end
