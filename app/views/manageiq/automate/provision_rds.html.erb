# Description: This MIQ Method Waits for the instance
# to be out of the creating state
# To retrieve instance properties to pass back to the marketplace
# from the criteria selected in the marketplace
# For use in Service/Provisioning/StateMachines/Methods/ProvisionRDS

require 'aws-sdk'
require 'rest-client'
require 'rubygems'
require 'net/http'
require 'uri/http'
require 'json'

$evm.log('info', 'ProvisionRDS: Entering Method.')

def send_order_status(referer, headers, status, order_id, information, message = '')
  path = "/order_items/#{order_id}/provision_update"
  host = URI.parse(referer).host
  url = "http://#{host}#{path}"
  uri = URI.parse(url)

  information = information.merge('provision_status' => status.downcase)
  $evm.log('info', "send_order_status: Information: #{information}")
  json = {
    status: "#{status}",
    message: "#{message}",
    info: information
  }
  $evm.log('info', "send_order_status: Information #{json}")
  begin
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Put.new(uri.path)
    request.add_field('X-Staff-Email', "#{headers[0]}")
    request.add_field('X-Staff-Token', "#{headers[1]}")
    request.content_type = 'application/json'
    request.body = json.to_json
    response = http.request(request)
    $evm.log('info', "send_order_status: HTTP Response code: #{response.code}")
    $evm.log('info', "send_order_status: HTTP Response message: #{response.message}")
  rescue StandardError => e
    $evm.log('error', "send_order_status: Exception caught while sending response back to core: #{e.message}")
  end
end # End of function

# If the instance did not complete creation from the previous state,
# Exit method.
if $evm.root['instance_failed'] == true
  $evm.log('error', 'ProvisionRDS:  Could not create instance. Exiting method.')
  # Does not need to pass back another response. Did that in the previous step.
  exit
end

# MIQ makes dialog_product_details into a string.
# Must convert to a hash.
product_details = $evm.root['dialog_order_item']
order_item_hash = JSON.parse(product_details.gsub("'", '"').gsub('=>', ':'))
product_hash = order_item_hash['product_details']
order_id = order_item_hash['id']
uuid = order_item_hash['uuid']
access_key_id = product_hash['access_key_id']
secret_key = product_hash['secret_access_key']
db_instance_id = $evm.root['db_instance_id']
host = $evm.root['dialog_referer']
headers = [$evm.root['dialog_email'], $evm.root['dialog_token']]

# Retrieve request properties from the product hash
rds = AWS::RDS.new(
  access_key_id: access_key_id,
  secret_access_key: secret_key
)

# Get the instance name of the variable created
begin
  instance_collection = rds.db_instances
  instance = instance_collection[db_instance_id]
  info = {
    'id' => order_id,
    'uuid' => uuid
  }
rescue AWS::RDS::Errors::InvalidClientTokenId => e
  $evm.log('error', 'ProvisionRDS: Exception caught when creating instance: #{e.message}')
  send_order_status(host, headers, 'CRITICAL', order_id, info, "#{e.message}")
  exit
rescue AWS::RDS::Errors => e
  $evm.log('error', "ProvisionRDS: Exception caught when creating instance: #{e.message}")
  send_order_status(host, headers, 'CRITICAL', order_id, info, "#{e.message}")
  exit
end

if instance.exists?
  $evm.log('info', "ProvisionRDS: Instance #{db_instance_id} exists")
  # Wait for the instance to create
  # Instance properties will not be available until the instance has
  # Completed the 'creating' stage
  # Typically takes 2-4 minutes
  sleep 5 while instance.status == 'creating'

  # Create the payload to send back to the marketplace
  information = {
    'id' => order_id,
    'uuid' => uuid,
    'hostname' => "#{instance.endpoint_address}",
    'port' => "#{instance.endpoint_port}",
    'username' => "#{instance.master_username}",
    'password' => "#{$evm.root['root_sec_pw']}",
    'instance_name' => "#{$evm.root['dialog_instance_name']}",
    'instance_class' => "#{$evm.root['dialog_db_instance_class']}",
    'instance_storage' => "#{$evm.root['dialog_allocated_storage']}"
  }
  $evm.log('info', "ProvisionRDS: Generated the RDS with the following information #{information}")
  send_order_status(host, headers, 'OK', order_id, information)
else # If the instance did not exist
  $evm.log('info', "ProvisionRDS: Instance #{db_instance_id} was not created and does not exist")
  info = {
    'order_id' => "#{order_id}"
  }
  send_order_status(host, headers, 'CRITICAL', order_id, info, 'Instance was not created and does not exist')
end

$evm.log('info', "ProvisionRDS: Instance #{db_instance_id} created")

#
# Description: This method launches the service provisioning job
# This is directly from MIQ

$evm.log('info', 'ProvisionRDS: Listing Root Object Attributes:')
$evm.root.attributes.sort.each { |k, v| $evm.log('info', "\t#{k}: #{v}") }
$evm.log('info', 'ProvisionRDS: End provisioning')

$evm.root['service_template_provision_task'].execute
