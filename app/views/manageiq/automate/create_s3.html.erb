# This script provisions a new S3 instance
# Based off of the criteria selected in the marketplace

# For use in MIQ under the
# /Provisioning/StateMachines/Methods/CreateS3

require 'aws-sdk'
require 'net/http'
require 'uri/http'
require 'json'

def send_order_status(endpoint, headers, status, information, message = '')
  uri = URI.parse(endpoint)

  information = information.merge('provision_status' => status.downcase)
  $evm.log('info', "send_order_status: Information: #{information}")
  json = {
    status: "#{status}",
    message: "#{message}",
    info: information
  }
  $evm.log('info', "send_order_status: Information #{json}")
  begin
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Put.new(uri.path)
    request.add_field('X-Staff-Email', "#{headers[0]}")
    request.add_field('X-Staff-Token', "#{headers[1]}")
    request.content_type = 'application/json'
    request.body = json.to_json
    response = http.request(request)
    $evm.log('info', "send_order_status: HTTP Response code: #{response.code}")
    $evm.log('info', "send_order_status: HTTP Response message: #{response.message}")
  rescue StandardError => e
    $evm.log('error', "send_order_status: Exception caught while sending response back to core: #{e.message}")
  end
end # End of function

$evm.log('info', 'CreateS3: Entering method')

# MIQ makes dialog_product_details into a string.
# Must convert to a hash.
product_details = $evm.root['dialog_order_item']
order_item_hash = JSON.parse(product_details.gsub("'", '"').gsub('=>', ':'))
product_hash = order_item_hash['product_details']
order_id = order_item_hash['id']
uuid = order_item_hash['uuid']
access_key_id = product_hash['access_key_id']
secret_access_key = product_hash['secret_access_key']
bucket_name = "id-#{uuid[0..9]}"
endpoint = $evm.root['dialog_referer']
headers = [$evm.root['dialog_email'], $evm.root['dialog_token']]

S3 = AWS::S3.new(
  access_key_id: access_key_id,
  secret_access_key: secret_access_key)

begin
  info = {
    'id' => order_id,
    'uuid' => uuid
  }
  if !S3.buckets[bucket_name].exists?
    S3.buckets.create(bucket_name)
  else
    $evm.log('error', 'CreateS3: Bucket name already exists.')
    send_order_status(endpoint, headers, 'CRITICAL', info, 'Bucket already exists.')
    exit
  end
rescue AWS::S3::Errors::InvalidClientTokenId => e
  $evm.log('error', "CreateS3: Invalid client token exception caught: #{e.message}.")
  send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
  exit
rescue AWS::S3::Errors::InvalidParameterValue => e
  $evm.log('error', "CreateS3: Invalid parameter exception caught: #{e.message}")
  send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
  exit
rescue AWS::S3::Errors => e
  $evm.log('error', "Create S3: AWS Exception caught: #{e.message}")
  send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
  exit
rescue StandardError => e
  $evm.log('error', "CreateS3: General exception caught: #{e.message}")
  $evm.log('error', "CreateS3: General exception back trace: #{e.backtrace}")
  send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
  exit
end

$evm.log('info', 'CreateS3: Bucket created.')
# TODO: Send back successful response if the bucket was created

info = {
  'id' => "#{order_id}",
  'uuid' => "#{uuid}",
  'bucket_name' => "#{bucket_name}"
}

send_order_status(endpoint, headers, 'OK', info)
