# Description: This MIQ Method
# provisions a new Amazon RDS Instance from the
# Criteria selected in the marketplace

# For use in MIQ under the
# For use in Service/Provisioning/StateMachines/Methods/CreateRDS

require 'aws-sdk'
require 'securerandom'

require 'net/http'
require 'uri/http'
require 'json'

def send_order_status(endpoint, headers, status, information, message = '')
  uri = URI.parse(endpoint)

  information = information.merge('provision_status' => status.downcase)
  $evm.log('info', "send_order_status: Information: #{information}")
  json = {
    status: "#{status}",
    message: "#{message}",
    info: information
  }
  $evm.log('info', "send_order_status: Information #{json}")
  begin
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Put.new(uri.path)
    request.add_field('X-Staff-Email', "#{headers[0]}")
    request.add_field('X-Staff-Token', "#{headers[1]}")
    request.content_type = 'application/json'
    request.body = json.to_json
    response = http.request(request)
    $evm.log('info', "send_order_status: HTTP Response code: #{response.code}")
    $evm.log('info', "send_order_status: HTTP Response message: #{response.message}")
  rescue StandardError => e
    $evm.log('error', "send_order_status: Exception caught while sending response back to core: #{e.message}")
  end
end # End of function

# Retrieve properties from request
# MIQ makes product_details into a string.
# Must make into a hash
product_details = $evm.root['dialog_order_item']
order_item_hash = JSON.parse(product_details.gsub("'", '"').gsub('=>', ':'))
product_hash = order_item_hash['product_details']
order_id = order_item_hash['id']
uuid = order_item_hash['uuid']
allocated_storage = Integer(product_hash['allocated_storage'])
db_instance_class = product_hash['db_instance_class']
engine = product_hash['engine']
username = 'admin'
storage_type = product_hash['storage_type']
security_groups_init = product_hash['security_groups']
db_instance_id = "id-#{uuid[0..9]}"
$evm.root['db_instance_id'] = db_instance_id
access_key_id = product_hash['access_key_id']
secret_key = product_hash['secret_access_key']
endpoint = $evm.root['dialog_referer']
headers = [$evm.root['dialog_email'], $evm.root['dialog_token']]

$evm.log('info', "CreateRDS: Processing order Id #{order_id}")
$evm.log('info', "CreateRDS: Processing db_instance_id #{db_instance_id}")

rds = AWS::RDS.new(
  access_key_id: access_key_id,
  secret_access_key: secret_key
)

# Create password to pass back to the Marketplace
# AWS RDS instance passwords require a minimum of 8 characters
sec_pw = SecureRandom.hex
sec_pw = sec_pw[0..9] # First 10 characters
$evm.log('info', "CreateRDS: Created password #{sec_pw}")

# Set the secure password
$evm.root['root_sec_pw'] = sec_pw

security_groups = !security_groups_init.nil? ? security_groups_init : ''
unless security_groups.nil?
  security_array = security_groups.split(',')
  security_array.each do |security|
    $evm.log('info', "CreateRDS: Security group= #{security}")
  end
end

options = {
  allocated_storage: allocated_storage,
  db_instance_class: db_instance_class,
  engine: engine,
  master_username: username,
  master_user_password: sec_pw,
  storage_type: storage_type,
  vpc_security_group_ids: security_array
}

# Remove all empty strings from the options list
# to avoid error in creation of RDS instance
options.each do |key, value|
  options.delete(key) if value == '' || value.nil?
end

$evm.log('info', "CreateRDS: Set options for new RDS instance: #{options}")

# Create instance
begin
  info = {
    'id' => order_id,
    'uuid' => uuid
  }
  $evm.log('info', "CreateRDS: info hash = #{info}")
  rds.db_instances.create(db_instance_id, options)
rescue AWS::RDS::Errors::InvalidClientTokenId => e
  $evm.log('error', "CreateRDS: Exception caught when creating instance: #{e.message}")
  $evm.root['instance_failed'] = true
  send_order_status(endpoint, headers, 'CRITICAL',  info, "#{e.message}")
  exit
rescue AWS::RDS::Errors::DBInstanceAlreadyExists => e
  $evm.log('error', "CreateRDS: Instance exists exception: #{e.message}")
  send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
  $evm.root['instance_failed'] = true
  exit
rescue AWS::RDS::Errors::InvalidParameterValue => e
  $evm.log('error', "CreateRDS: Invalid parameter exception: #{e.message}")
  $evm.root['instance_failed'] = true
  send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
  exit
rescue AWS::RDS::Errors::StorageTypeNotSupported => e
  $evm.log('error', "CreateRDS: Unsupported storage exception: #{e.message}")
  $evm.root['instance_failed'] = true
  send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
  exit
rescue AWS::RDS::Errors => e
  $evm.log('error', "CreateRDS: Exception caught when creating instance: #{e.message}")
  $evm.root['instance_failed'] = true
  send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
  exit
rescue StandardError => e
  $evm.log('error', "CreateRDS: General exception caught: #{e.message}")
  $evm.root['instance_failed'] = true
  send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
  exit
end
