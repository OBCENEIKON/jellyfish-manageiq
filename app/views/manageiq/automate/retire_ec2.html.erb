# Description: This MIQ Method will delete a specified EC2 instance
# For use in Service/Provisioning/StateMachines/Methods/RetireEC2

require 'aws-sdk'
require 'net/http'
require 'uri/http'
require 'json'

$evm.log('error', 'RetireEC2: Enter Method.')

def send_order_status(endpoint, headers, status, information, message = '')
  uri = URI.parse(endpoint)

  information = information.merge('provision_status' => status.downcase)
  $evm.log('info', "send_order_status: Information: #{information}")
  json = {
    status: "#{status}",
    message: "#{message}",
    info: information
  }
  $evm.log('info', "send_order_status: Information #{json}")
  begin
    http = Net::HTTP.new(uri.host, uri.port)
    request = Net::HTTP::Put.new(uri.path)
    request.content_type = 'application/json'
    request.body = json.to_json
    response = http.request(request)
    $evm.log('info', "send_order_status: HTTP Response code: #{response.code}")
    $evm.log('info', "send_order_status: HTTP Response message: #{response.message}")
  rescue StandardError => e
    $evm.log('error', "send_order_status: Exception caught while sending response back to core: #{e.message}")
  end
end # End of function

# Retrieve properties from request
# MIQ makes product_details into a string.
# Must make into a hash
product_details = $evm.root['dialog_order_item']
order_item_hash = JSON.parse(product_details.gsub("'", '"').gsub('=>', ':'))
product_hash = order_item_hash['product_details']
uuid = order_item_hash['uuid']
access_key_id = product_hash['access_key_id']
secret_access_key = product_hash['secret_access_key']
instance_id = product_hash['instance_id']
order_id = order_item_hash['id']
headers = [$evm.root['dialog_email'], $evm.root['dialog_token']]
endpoint = $evm.root['dialog_referer']

ec2 = AWS::EC2.new(
  access_key_id: access_key_id,
  secret_access_key: secret_access_key
)

info = {
  'id' => order_id,
  'uuid' => uuid
}

# Get the specified VM
begin
  instance = ec2.instances[instance_id]
rescue AWS::EC2::Errors::InvalidClientTokenId => e
  $evm.log('error', "RetireEC2: Invalid Token Id exception caught: #{e.message}")
  send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
  exit
rescue AWS::EC2::Errors => e
  $evm.log('error', "RetireEC2: EC2 exception caught: #{e.message}")
  send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
  exit
end

if instance.exists?
  $evm.log('info', 'RetireEC2: Instance exists')
  begin
    instance.terminate
    $evm.log('info', 'RetireEC2: instance terminated.')
  rescue AWS::EC2::Errors::InvalidClientTokenId => e
    $evm.log('error', "RetireEC2: Invalid client token exception caught: #{e.message}")
    send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
    exit
  rescue AWS::EC2::Errors => e
    $evm.log('error', "RetireEC2: Exception caught #{e.message}")
    send_order_status(endpoint, headers, 'CRITICAL', info, "#{e.message}")
    exit
  end
  send_order_status(endpoint, headers, 'OK', info)
else
  $evm.log('error', "RetireEC2: Instance #{instance_id} does not exist.")
  send_order_status(endpoint, headers, 'CRITICAL', info, 'instance does not exist')
end

$evm.log('info', 'RetireEC2: Instance retired.')

send_order_status(endpoint, headers, 'OK', info, 'Instance retired.')
